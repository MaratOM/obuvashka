<?php
/**
 * @file
 * Module: uc_extra_fields_pane.module
 *
 * This module extends Ubercart panes by allowing you to set values
 * by a variety of methods to variables that will show up in the order.
 *
 * co-authored by:
 * blackice78 - Maurizio Ganovelli - drupal@ganovelli.it
 * and
 * panthar - Bobby Kramer - panthar1@gmail.com
 * and
 * MegaChriz - megachriz@hotmail.com
 *
 */

/**
 **********************************************
 * TABLE OF CONTENTS
 **********************************************
 * - DRUPAL HOOKS
 *   implementations of hook_help(), hook_enable(), hook_menu() and hook_user().
 *
 * - UBERCART HOOKS
 *   implementations of hook_checkout_pane(), hook_order() and hook_checkout_pane_alter().
 *
 * - UBERCART CALLBACKS
 *   callbacks for checkout panes and order panes.
 *
 * - TOKEN HOOKS
 *   uc_extra_fields_pane_token_values(), uc_extra_fields_pane_token_list().
 *
 * - VIEWS HOOKS
 *   uc_extra_fields_pane_views_api(), other views hooks are in views/uc_extra_fields_pane.views.inc
 *
 * - UCXF HOOKS
 *   Adds display options
 *
 * - DATABASE REQUESTS
 *   functions to load and delete order/address fields
 *   function to load fields from a particular pane type
 *
 * - FORM ALTERS
 *   Adds extra address fields to forms
 *   Adds weight to address fields
 *
 * - MULTILANGUAGE (i18n)
 *   Makes user defined strings in this module translatable
 *
 * - THEMING
 *   functions using the Drupal theme layer
 **********************************************
 */

// Element types
define('UCXF_VALUE_ORDER_INFO', 11);
define('UCXF_VALUE_ORDER_DELIVERY', 12);
define('UCXF_VALUE_ORDER_BILLING', 13);
define('UCXF_VALUE_ADDRESS', 21);

// -------------------------------------------------------------------
// DRUPAL HOOKS
// -------------------------------------------------------------------

/**
 * Implementation of hook_help().
 * @param string $path
 * @param array $arg
 * @return string
 */
function uc_extra_fields_pane_help($path, $arg = array()) {
  switch ($path) {
    case 'admin/help#uc_extra_fields_pane':
      module_load_include('class.php', 'uc_extra_fields_pane', 'includes/ucxf_field');
      $output = '<p>' . t('This modules allows an administrator to define additional (billing and shipping) address fields (i.e. VAT) as well as custom order fields in Ubercart e-commerce suite. These fields will be available during checkout process and in order handling pages.') . '</p>';

      $output .= '<h2>' . t('Adding fields for checkout') . '</h2>';
      $output .= '<ul>';
      $output .= '<li>' . t('Extra address fields for the delivery and billing checkout panes can be added at the <a href="@address-fields-page-url">@address-fields-page-title</a> page.', array('@address-fields-page-url' => url('admin/store/settings/checkout/edit/fields'), '@address-fields-page-title' => t('Address fields'))) . '</li>';
      $output .= '<li>' . t('Custom order fields for the extra information checkout pane can be added at the <a href="@custom-fields-page-url">@custom-fields-page-title</a> page.', array('@custom-fields-page-url' => url('admin/store/settings/checkout/edit/extrafields'), '@custom-fields-page-title' => t('Custom order fields'))) . '</li>';
      $output .= '</ul>';

      $output .= '<h2>' . t('About the field types') . '</h2>';
      $output .= '<ul>';
      $output .= '<li><strong>' . t('Textfield') . '</strong><br />' . t('This field type adds a simple text field to the form. This field can be pre-filled with a default value.') . '</li>';
      $output .= '<li><strong>' . t('Select list') . '</strong><br />' . t('This field type adds a selection field to the form (users can select a value from a dropdown menu). In the value section you can define the available options in the format "safe_key|readable part". The <em>safe_key</em> part is the part that will be saved in the database. The <em>readable</em> part is what will be presented to the user. IMPORTANT NOTE: if you want to make this field required, make sure that the first option of the list has an <em>empty</em> safe key. You can insert an empty safe key by typing a space. Example: !example', array('!example' => '<br />' . ucxf_field::get_example(ucxf_field::UCXF_WIDGET_TYPE_SELECT))) . '</li>';
      $output .= '<li><strong>' . t('Checkbox') . '</strong><br />' . t('This field type adds a checkbox to the form. Note: setting this field to required has no effect, because of a core bug in Drupal. The module <a href="@checkbox-validate-url">@checkbox-validate-title</a> corrects this bug.', array('@checkbox-validate-url' => url('http://drupal.org/project/checkbox_validate'), '@checkbox-validate-title' => t('Checkbox Validate'))) . '</li>';
      $output .= '<li><strong>' . t('Constant') . '</strong><br />' . t('This field type adds a value to the form which can not be changed by the customer. It is just displayed as plain text. However, admins who can change the Ubercart order are able to adjust the value of this field, because then it\'s displayed as a text field. Example: !example', array('!example' => '<br />' . ucxf_field::get_example(ucxf_field::UCXF_WIDGET_TYPE_CONSTANT))) . '</li>';
      $output .= '<li><strong>' . t('PHP string') . '</strong><br />' . t('This field type is similar to the constant field type. The difference is that the shown value can be defined with PHP code, which means you could get this value from everywhere. In the value section you should return a string, for example: !example', array('!example' => '<br />' . ucxf_field::get_example(ucxf_field::UCXF_WIDGET_TYPE_PHP))) . '</li>';
      $output .= '<li><strong>' . t('PHP select list') . '</strong><br />' . t("This field type is similar to the select list field type. The difference is that you can build the option list with PHP. Be sure to return an array with 'key' => 'value'. IMPORTANT NOTE: if you want to make this field required, make sure that the first option has an <em>empty</em> key. This may be a space, but it can also be an empty string. Example: !example", array('!example' => '<br />' . ucxf_field::get_example(ucxf_field::UCXF_WIDGET_TYPE_PHP_SELECT))) . '</li>';
      $output .= '</ul>';
      return $output;
    case 'admin/store/settings/addressfields/add':
    case 'admin/store/settings/addressfields/%/edit':
    case 'admin/store/settings/extrafields/add':
    case 'admin/store/settings/extrafields/%/edit':
      return t('For more help, visit the <a href="@help-page">Extra Fields Pane help page</a>.', array('@help-page' => url('admin/store/help/uc_extra_fields_pane')));
  }
}

/**
 * Implementation of hook_enable().
 * Makes sure code of this module is executed after 'uc_addresses' (if that module is available)
 */
function uc_extra_fields_pane_enable() {
  // Get weight of uc_addresses module
  $sQuery = "SELECT weight
  FROM {system}
  WHERE name = 'uc_addresses'
  AND type = 'module'
  ";
  $iWeight = db_result(db_query($sQuery)) + 10;

  // Increase the weight of this module, making it 10 heavier than uc_addresses.
  db_query("UPDATE {system} SET weight = %d WHERE name = 'uc_extra_fields_pane' AND type = 'module'", $iWeight);
}

/**
 * Implementation of hook_menu().
 * @return array
 */
function uc_extra_fields_pane_menu() {
  // Extra address fields
  $items['admin/store/settings/addressfields/add'] = array(
    'title' => 'Add an address field',
    'description' => 'Add extra address fields.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_extra_fields_pane_addressfield_form'),
    'access arguments' => array('administer store'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_extra_fields_pane.admin.inc',
  );
  $items['admin/store/settings/addressfields/%uc_extra_fields_pane_field/delete'] = array(
    'title' => 'Delete address field',
    'description' => 'Delete an address field.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_extra_fields_pane_field_delete_confirm_form', 4),
    'access arguments' => array('administer store'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_extra_fields_pane.admin.inc',
  );
  $items['admin/store/settings/addressfields/%uc_extra_fields_pane_field/edit'] = array(
    'title' => 'Modify address field',
    'description' => 'Edit an address field.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_extra_fields_pane_addressfield_form', 4),
    'access arguments' => array('administer store'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_extra_fields_pane.admin.inc',
  );

  // Custom order fields
  $items['admin/store/settings/checkout/edit/extrafields'] = array(
    'title' => 'Custom order fields',
    'description' => 'Create and edit custom order fields.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_extra_fields_pane_customfields'),
    'access arguments' => array('administer store'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'file' => 'uc_extra_fields_pane.admin.inc',
  );
  $items['admin/store/settings/extrafields/add'] = array(
    'title' => 'Add custom order field',
    'description' => 'Add custom order fields.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_extra_fields_pane_customfield_form'),
    'access arguments' => array('administer store'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_extra_fields_pane.admin.inc',
  );
  $items['admin/store/settings/extrafields/%uc_extra_fields_pane_field/delete'] = array(
    'title' => 'Delete custom order field',
    'description' => 'Delete a custom field.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_extra_fields_pane_field_delete_confirm_form', 4),
    'access arguments' => array('administer store'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_extra_fields_pane.admin.inc',
  );
  $items['admin/store/settings/extrafields/%uc_extra_fields_pane_field/edit'] = array(
    'title' => 'Modify field',
    'description' => 'Edit custom order field.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_extra_fields_pane_customfield_form', 4),
    'access arguments' => array('administer store'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_extra_fields_pane.admin.inc',
  );

  // Help
  $items['admin/store/help/uc_extra_fields_pane'] = array(
    'title' => 'Extra Fields Pane',
    'page callback' => 'uc_extra_fields_pane_help',
    'page arguments' => array('admin/help#uc_extra_fields_pane'),
    'access arguments' => array('administer store'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implementation of hook_user().
 *
 * Saves values of extra address fields.
 * Note: the implementation of this function is currently a little
 * bit dirty. It links the extra address fields to the first address
 * from the user it finds.
 * Normally, an user will have only one address after registering,
 * so it assumes this is the case.
 *
 * @param $op An integer representing the action being performed.
 * @param $edit An array of form values submitted by the user.
 * @param $account The user on which the operation is being performed.
 * @param $category The active category of user information being edited.
 * @return void
 * @see uc_extra_fields_pane_addressfields_user_register_form_alter()
 */
function uc_extra_fields_pane_user($op, &$edit, &$account, $category = NULL) {
  global $user;

  if (module_exists('uc_addresses') && variable_get('uc_addresses_require_address', TRUE)) {
    switch ($op) {
      case 'insert':
        // Load field definitions
        $fields = uc_extra_fields_pane_load_fields_from_db('extra_address');

        // Load address id
        $sQuery = 'SELECT aid FROM {uc_addresses} WHERE uid=%d';
        $address_id = db_result(db_query($sQuery, $edit['uid']));

        // Save values
        foreach ($fields as $fieldname => $field) {
          uc_extra_fields_pane_value_save(
            array(
              'element_id' => $address_id,
              'element_type' => UCXF_VALUE_ADDRESS,
              'field_id' => $field->field_id,
              'value' => check_plain($edit[$fieldname]),
            )
          );
        }
        return;
    }
  }
}

// -------------------------------------------------------------------
// UBERCART HOOKS
// -------------------------------------------------------------------

/**
 * Implementation of hook_checkout_pane().
 *
 * Add panes as you feel fit. Must add a new pane definition for both checkout and order... and a new callback function like below.
 *
 * Once you have that, just add a new pane_type to the create/edit admin forms, and that pane should be operational right away.
 *
 * @return array
 */
function uc_extra_fields_pane_checkout_pane() {
  $panes[] = array(
    'id' => 'extra_information',
    'callback' => 'uc_extra_fields_pane_information',
    'title' => t('Дополнительная информация'),
    'desc' => t('Дополнительная информация'),
    'weight' => 0,
  );
  return $panes;
}

/**
 * Implementation of hook_order_pane().
 * Current order-pane definitions
 * @return array
 */
function uc_extra_fields_pane_order_pane() {
  $panes[] = array(
    'id' => 'extra_information',
    'callback' => 'uc_extra_fields_pane_order_information',
    'title' => t('Дополнительная информация'),
    'desc' => t('Дополнительная информация'),
    'class' => 'pos-left',
    'weight' => 0,
    'show' => array('view', 'edit', 'customer'), // invoice --> from itpl.php template
  );
  // MegaChriz: not sure if the following needs to be removed either
  $panes[] = array(
    'id' => 'extra_delivery',
    'callback' => 'uc_extra_fields_pane_order_handler_delivery',
    'title' => t('Метро'),
    'desc' => t('Метро'),
    'class' => 'pos-left',
    'weight' => 1.5,
    'show' => array('view', 'edit', 'customer'), // invoice --> from itpl.php template
  );
  $panes[] = array(
    'id' => 'extra_billing',
    'callback' => 'uc_extra_fields_pane_order_handler_billing',
    'title' => t('Extra billing'),
    'desc' => t('Extra billing'),
    'class' => 'pos-left',
    'weight' => 2.5,
    'show' => array('view', 'edit', 'customer'), // invoice --> from itpl.php template
  );

  return $panes;
}

/**
 * Implementation of hook_order().
 * @param string $op
 * @param mixed $arg1
 * @param mixed $arg2
 * @return void
 */
function uc_extra_fields_pane_order($op, &$arg1, $arg2) {
  $aElementTypes = array(
    'information' => array(
      'pane_type' => '',
      'element_type' => UCXF_VALUE_ORDER_INFO,
      'suffix' => ''
    ),
    'delivery' => array(
      'pane_type' => 'extra_delivery',
      'element_type' => UCXF_VALUE_ORDER_DELIVERY,
      'suffix' => '_delivery'
    ),
    'billing' => array(
      'pane_type' => 'extra_billing',
      'element_type' => UCXF_VALUE_ORDER_BILLING,
      'suffix' => '_billing'
    ),
  );

  switch ($op) {
    case 'new':
      // do nothing, extra field cannot be handled here
      break;

    case 'save':
      // If $arg1->extra_fields is not an array, initialize it with an array.
      if (!is_array($arg1->extra_fields)) {
        $arg1->extra_fields = array();
      }

      // If the order is edited, the saved values are in a different place,
      // for example in 'ucxf_extra_delivery'.
      // The values couldn't be saved in the right place (viz. 'extra_fields') directly due to overwrite problems.
      // The alternate place will be checked for new values
      // If there are new values, the new values will be merged with the 'extra_fields' array.
      $panes = uc_extra_fields_pane_order_pane();
      foreach ($panes as $pane) {
        if (isset($arg1->{'ucxf_' . $pane['id']})) {
          // Merge values with 'extra_fields' array
          $arg1->extra_fields = array_merge($arg1->extra_fields, $arg1->{'ucxf_' . $pane['id']});
        }
      }

      if (count($arg1->extra_fields)) {
        // Save values per element type.
        foreach ($aElementTypes as $element_type => $data) {
          $fields = uc_extra_fields_pane_load_fields_from_db($data['pane_type']);
          foreach ($fields as $fieldname => $field) {
            $fixedfieldname = $fieldname . $data['suffix'];
            if (isset($arg1->extra_fields[$fixedfieldname])) {
              uc_extra_fields_pane_value_save(
                array(
                  'element_id' => $arg1->order_id,
                  'element_type' => $data['element_type'],
                  'field_id' => $field->field_id,
                  'value' => $arg1->extra_fields[$fixedfieldname],
                )
              );
            }
          }
        }
      }
      break;

    case 'load':
      $arg1->extra_fields = array();
      // Load values per element type.
      foreach ($aElementTypes as $element_type => $data) {
        $rows = uc_extra_fields_pane_value_list_load($arg1->order_id, $data['element_type']);
        foreach ($rows as $fieldname => $row) {
          $fixedfieldname = $fieldname . $data['suffix'];
          $arg1->extra_fields[$fixedfieldname] = $row['value'];
        }
      }
      break;

    case 'delete':
      // Delete Extra Fields Pane values belonging to order
      $sQuery = "DELETE FROM {uc_extra_fields_values}
      WHERE element_id=%d
      AND element_type IN (%d, %d, %d)";
      db_query($sQuery, $arg1->order_id, UCXF_VALUE_ORDER_INFO, UCXF_VALUE_ORDER_DELIVERY, UCXF_VALUE_ORDER_BILLING);
      break;
  }
}

/**
 * Implementation of hook_checkout_pane_alter().
 * Alters delivery and billing pane
 * @param array $panes
 * @return void
 */
function uc_extra_fields_pane_checkout_pane_alter(&$panes) {
  foreach ($panes as $key => $pane) {
    switch ($pane['id']) {
      case 'delivery':
        $panes[$key]['callback'] = 'uc_extra_fields_pane_uc_checkout_pane_delivery';
        break;
      case 'billing':
        $panes[$key]['callback'] = 'uc_extra_fields_pane_uc_checkout_pane_billing';
        break;
    }
  }
}

// -------------------------------------------------------------------
// UBERCART CALLBACKS
// -------------------------------------------------------------------

/**
 * We wrap these pane functions for the checkout/order panes, so that we know which pane is calling,
 * and therefore everything appears inside its own pane.
 *
 * The only way I could get this to work was with wrapping these functions.
 * Giving each pane an argument did not work.
 *
 * If you can figure out another way, please do it. This does however allow for a lot of flexibility with modules connecting to it
 * because you can call each pane directly in any order processing module.
 */

// Checkout pane callbacks

/**
 * extra_information checkout pane callback
 * @param string $op
 * @param mixed $arg1
 * @param mixed $arg2
 * @return mixed
 */
function uc_extra_fields_pane_information($op, &$arg1 = NULL, $arg2 = NULL) {
  module_load_include('inc', 'uc_extra_fields_pane', 'includes/checkout_pane');
  return uc_extra_fields_pane_load_pane_type($op, $arg1, $arg2, "extra_information");
}

/**
 * Overrides uc_checkout_pane_delivery() function in uc_cart_checkout_pane.inc
 * @param string $op
 * @param mixed $arg1
 * @param mixed $arg2
 * @return mixed
 */
function uc_extra_fields_pane_uc_checkout_pane_delivery($op, $arg1, $arg2) {
  module_load_include('inc', 'uc_extra_fields_pane', 'includes/addressfields');
  return uc_extra_fields_pane_uc_checkout_pane_address('delivery', $op, $arg1, $arg2);
}

/**
 * Overrides uc_checkout_pane_billing() function in uc_cart_checkout_pane.inc
 * @param string $op
 * @param mixed $arg1
 * @param mixed $arg2
 * @return mixed
 */
function uc_extra_fields_pane_uc_checkout_pane_billing($op, $arg1, $arg2) {
  module_load_include('inc', 'uc_extra_fields_pane', 'includes/addressfields');
  return uc_extra_fields_pane_uc_checkout_pane_address('billing', $op, $arg1, $arg2);
}

// Order pane callbacks

function uc_extra_fields_pane_order_handler_delivery($op, $arg1 = NULL, $arg2 = NULL) {
  module_load_include('inc', 'uc_extra_fields_pane', 'includes/order_pane');
  return uc_extra_fields_pane_order_handler($op, $arg1, $arg2, "extra_delivery");
}
function uc_extra_fields_pane_order_handler_billing($op, $arg1 = NULL, $arg2 = NULL) {
  module_load_include('inc', 'uc_extra_fields_pane', 'includes/order_pane');
  return uc_extra_fields_pane_order_handler($op, $arg1, $arg2, "extra_billing");
}
function uc_extra_fields_pane_order_information($op, $arg1 = NULL, $arg2 = NULL) {
  module_load_include('inc', 'uc_extra_fields_pane', 'includes/order_pane');
  return uc_extra_fields_pane_order_handler($op, $arg1, $arg2, "extra_information");
}

/**
 * Returns title of pane
 * @param string $pane_type
 *   The machine name of the pane.
 * @return string
 */
function uc_extra_fields_pane_get_pane_title($pane_type) {
  // First check variable
  $pane_title = variable_get('uc_extra_fields_pane_' . $pane_type . '_title', NULL);
  // Then check checkout pane data
  if (is_null($pane_title)) {
    $pane_title = _checkout_pane_data($pane_type, 'title');
  }
  // Then check order pane data
  if (is_null($pane_title)) {
    if (module_exists('uc_order')) {
      $pane_title = _order_pane_data($pane_type, 'title');
    }
  }
  // If still NULL, just call uc_extra_fields_pane_order_pane().
  if (is_null($pane_title)) {
    $panes = uc_extra_fields_pane_order_pane();
    foreach ($panes as $pane) {
      if ($pane['id'] == $pane_type) {
        $pane_title = $pane['title'];
      }
    }
  }
  // If still NULL, return $pane_type
  if (is_null($pane_title)) {
    return $pane_type;
  }
  // Return pane title
  return $pane_title;
}

// -------------------------------------------------------------------
// TOKEN HOOKS
// -------------------------------------------------------------------

/**
 * Implementation of hook_token_list().
 * @param string $type
 * @return array
 */
function uc_extra_fields_pane_token_list($type = 'all') {
  $tokens = array();
  if ($type == 'order' || $type == 'ubercart' || $type == 'all') {
    $result = db_query("SELECT label, pane_type, db_name FROM {uc_extra_fields}");
    while ($field_data = db_fetch_array($result)) {
      $field = uc_extra_fields_pane_create_field($field_data);
      $db_name = str_replace('ucxf_', '', $field->db_name);
      $pane_types = $field->pane_types;

      // Only when $field['pane_type'] is 'extra_delivery|extra_billing' we have more then one pane type
      foreach ($pane_types as $pane_type) {
        switch ($pane_type) {
          case 'extra_delivery':
            $token_name = 'extra-extra_delivery-' . $db_name;
            $fixedfieldname = $field->db_name . '_delivery';
            break;

          case 'extra_billing':
            $token_name = 'extra-extra_billing-' . $db_name;
            $fixedfieldname = $field->db_name . '_billing';
            break;

          default:
            $token_name = 'extra-' . $field->pane_type . '-' . $db_name;
            $fixedfieldname = $field->db_name;
            break;
        }
        // Get pane title
        $pane_title = uc_extra_fields_pane_get_pane_title($pane_type);

        // Add token
        $tokens['order'][$token_name] = t('!pane_title: !label, formatted', array('!pane_title' => $pane_title, '!label' => $field->output('label')));
        $tokens['order'][$token_name . '-raw'] = t('!pane_title: !label, raw', array('!pane_title' => $pane_title, '!label' => $field->output('label')));
      }
    }
  }
  return $tokens;
}

/**
 * Implementation of hook_token_values().
 * @param string $type
 * @param object $object
 * @return array
 */
function uc_extra_fields_pane_token_values($type, $object = NULL) {
  $values = array();
  switch ($type) {
    case 'order':
      $order = $object;
      $result = db_query("SELECT * FROM {uc_extra_fields}");
      while ($field_data = db_fetch_array($result)) {
        $field = uc_extra_fields_pane_create_field($field_data);
        $db_name = str_replace('ucxf_', '', $field->db_name);
        $pane_types = $field->pane_types;

        // Only when $field->pane_type is 'extra_delivery|extra_billing' we have more then one pane type
        foreach ($pane_types as $pane_type) {
          switch ($pane_type) {
            case 'extra_delivery':
              $token_name = 'extra-extra_delivery-' . $db_name;
              $fixedfieldname = $field->db_name . '_delivery';
              break;

            case 'extra_billing':
              $token_name = 'extra-extra_billing-' . $db_name;
              $fixedfieldname = $field->db_name . '_billing';
              break;

            default:
              $token_name = 'extra-' . $field->pane_type . '-' . $db_name;
              $fixedfieldname = $field->db_name;
              break;
          }

          if (isset($order->extra_fields[$fixedfieldname]) && $order->extra_fields[$fixedfieldname] != '') {
            $values[$token_name] = $field->output_value($order->extra_fields[$fixedfieldname]);
            $values[$token_name . '-raw'] = $order->extra_fields[$fixedfieldname];
          }
          else {
            $values[$token_name] = '';
            $values[$token_name . '-raw'] = '';
          }
        }
      }
      break;
  }
  return $values;
}

// -------------------------------------------------------------------
// VIEWS HOOKS
// -------------------------------------------------------------------

/**
 * Implementation of hook_views_api().
 * @return array
 */
function uc_extra_fields_pane_views_api() {
  return array(
    'api' => '2.0',
    'path' => drupal_get_path('module', 'uc_extra_fields_pane') . '/views',
  );
}

// -------------------------------------------------------------------
// UCXF HOOKS
// -------------------------------------------------------------------

/**
 * Implementation of hook_ucxf_display_options().
 * @param ucxf_field $field
 * @return array
 */
function uc_extra_fields_pane_ucxf_display_options($field) {
  $options = array(
    'checkout' => array(
      'title' => t('Checkout page'),
      'description' => t('Uncheck to hide the field on the checkout page. The field will still be added to the order, and will appear in the order confirmation as well. This setting only applies when the field type is %php or %constant.', array('%php' => t('PHP string'), '%constant' => t('Constant'))),
    ),
    'review' => array(
      'title' => t('Order review page'),
      'description' => t('The page where the order is reviewed by a customer before the order is submitted.'),
    ),
    'order' => array(
      'title' => t('Order view page'),
      'description' => t('The page where the details of the order can be viewed after the order is submitted.'),
    ),
  );
  return $options;
}

// -------------------------------------------------------------------
// DATABASE REQUESTS
// - load/delete field
// - load fields from particular pane type
// -------------------------------------------------------------------

// Deprecated: this function will be replaced in a future version
/**
 * Create Field
 *
 * Based on pane_type either an instance will of either
 * ucxf_addressfield or ucxf_customfield will be created.
 * If no array is given, an instance of uxcf_field is given.
 *
 * @param array $field_data
 * @return ucxf_field
 */
function uc_extra_fields_pane_create_field($field_data = array()) {
  module_load_include('class.php', 'uc_extra_fields_pane', 'includes/ucxf_field');
  if (!isset($field_data['pane_type'])) {
    return new ucxf_field();
  }

  switch ($field_data['pane_type']) {
    case 'extra_delivery':
    case 'extra_billing':
    case 'extra_delivery|extra_billing':
      module_load_include('class.php', 'uc_extra_fields_pane', 'includes/ucxf_addressfield');
      $field = new ucxf_addressfield();
      break;
    default:
      module_load_include('class.php', 'uc_extra_fields_pane', 'includes/ucxf_customfield');
      $field = new ucxf_customfield();
      break;
  }
  $field->from_array($field_data);
  return $field;
}

/**
 * Implementation of hook_load().
 * @param int $fid
 * @return object
 */
function uc_extra_fields_pane_field_load($fid) {
  $field_data = db_fetch_array(db_query("SELECT * FROM {uc_extra_fields} WHERE field_id = %d", $fid));
  $field = uc_extra_fields_pane_create_field($field_data);

  // Let other modules react on this
  module_invoke_all('ucxf_field', $field, 'load');

  return $field;
}

// Deprecated function, you can also call $field->delete() now.
/**
 * field_delete()
 * Deletes field
 * @param int $fid
 * @return boolean
 */
function uc_extra_fields_pane_field_delete($fid) {
  $field = uc_extra_fields_pane_field_load($fid);

  if (!empty($field)) {
    $field->delete();
    return TRUE;
  }
  return FALSE;
}

// Deprecated: this function will be replaced in a future version.
/**
 * Load all extra fields from the database.
 *
 * Optionally, give it a $pane_type to specify which pane we want fields from.
 * @param string $pane_type
 * @return array
 */
function uc_extra_fields_pane_load_fields_from_db($pane_type=NULL) {
  static $uc_extra_fields_pane_fields;

  // Load classes
  module_load_include('class.php', 'uc_extra_fields_pane', 'includes/ucxf_field');

  // If no pane type provided, all fields must be loaded
  if (!$pane_type) {
    $pane_type = 'all';
  }

  // caching results
  if (!isset($uc_extra_fields_pane_fields[$pane_type])) {
    $uc_extra_fields_pane_fields[$pane_type] = array();
  }
  else {
    return $uc_extra_fields_pane_fields[$pane_type];
  }

  switch ($pane_type) {
    case 'all':
      // Load all fields from all panes (except delivery and billing panes)
      $db_results = db_query("SELECT * FROM {uc_extra_fields}
      WHERE pane_type!='extra_delivery' AND pane_type!='extra_billing' AND pane_type!='extra_delivery|extra_billing'
      ORDER BY weight ASC");
      break;

    case 'extra_delivery':
      // Load all extra delivery fields
      $db_results = db_query("SELECT * FROM {uc_extra_fields} WHERE pane_type='extra_delivery' OR pane_type='extra_delivery|extra_billing'");
      break;
    case 'extra_billing':
      // Load all extra billing fields
      $db_results = db_query("SELECT * FROM {uc_extra_fields} WHERE pane_type='extra_billing' OR pane_type='extra_delivery|extra_billing'");
      break;

    case 'extra_address':
      // Load both delivery and billing fields
      $db_results = db_query("SELECT * FROM {uc_extra_fields} WHERE pane_type='extra_delivery' OR pane_type='extra_billing' OR pane_type='extra_delivery|extra_billing'");
      break;

    default:
      // Load fields from specific pane (not delivery or billing pane)
      $db_results = db_query("SELECT * from {uc_extra_fields} WHERE pane_type='%s' ORDER BY weight ASC", $pane_type);
      break;
  }

  // Get results
  while ($row = db_fetch_array($db_results)) {
    $field = uc_extra_fields_pane_create_field($row);
    $uc_extra_fields_pane_fields[$pane_type][$field->db_name] = $field;
  }

  return $uc_extra_fields_pane_fields[$pane_type];
}

/**
 * uc_extra_fields_pane_value_load()
 * Loads value from database
 * @param int $p_iElement_id
 *  id of element, order_id or uc_addresses id
 * @param int $p_iElementType
 *  type of element: order or address
 * @param int $p_iField_id
 *  id of field as known in uc_extra_fields
 * @return object
 */
function uc_extra_fields_pane_value_load($p_iElement_id, $p_iElementType, $p_iField_id) {
  $sQuery = "SELECT
    ucxf_values.element_id,
    ucxf_values.element_type,
    ucxf_values.field_id,
    ucxf_values.value,
    ucxf_fields.db_name
  FROM {uc_extra_fields_values} AS ucxf_values
  INNER JOIN {uc_extra_fields} AS ucxf_fields USING(field_id)
  WHERE element_id=%d
  AND element_type=%d
  AND field_id=%d
  ";
  return db_fetch_object(db_query($sQuery, $p_iElement_id, $p_iElementType, $p_iField_id));
}

/**
 * uc_extra_fields_pane_value_list_load()
 * Loads a list of values from database
 * @param int $p_iElement_id
 *  id of element, order_id or uc_addresses id
 * @param int $p_iElementType
 *  type of element: order or address
 * @return array
 */
function uc_extra_fields_pane_value_list_load($p_iElement_id, $p_iElementType) {
  $sQuery = "SELECT
    ucxf_values.element_id,
    ucxf_values.element_type,
    ucxf_values.field_id,
    ucxf_values.value,
    ucxf_fields.db_name
  FROM {uc_extra_fields_values} AS ucxf_values
  INNER JOIN {uc_extra_fields} AS ucxf_fields USING(field_id)
  WHERE element_id=%d
  AND element_type=%d
  ";
  $result = db_query($sQuery, $p_iElement_id, $p_iElementType);
  $rows = array();
  while ($row = db_fetch_array($result)) {
    $rows[$row['db_name']] = $row;
  }
  return $rows;
}

/**
 * uc_extra_fields_pane_value_save()
 * Saves data to database
 * @param array $data
 * @return boolean
 */
function uc_extra_fields_pane_value_save($data) {
  $result = FALSE;

  // Check if value already exists in db
  $value = uc_extra_fields_pane_value_load($data['element_id'], $data['element_type'], $data['field_id']);
  if (is_object($value)) {
    // Value already exists, send an UPDATE query
    $sQuery = "UPDATE {uc_extra_fields_values} SET
      value='%s'
    WHERE element_id=%d
    AND element_type=%d
    AND field_id=%d
    ";
    $result = db_query($sQuery, $data['value'], $data['element_id'], $data['element_type'], $data['field_id']);
  }
  else {
    // Value is new, send an INSERT
    $sQuery = "INSERT INTO {uc_extra_fields_values} (element_id, element_type, field_id, value)
      VALUES (%d, %d, %d, '%s')
    ";
    $result = db_query($sQuery, $data['element_id'], $data['element_type'], $data['field_id'], $data['value']);
  }

  return $result;
}

/**
 * uc_extra_fields_pane_value_delete()
 * Removes value from db
 * @param int $p_iElement_id
 *  id of element, order_id or uc_addresses id
 * @param int $p_iElementType
 *  type of element
 * @param int $p_iField_id
 *  id of field as known in uc_extra_fields
 * @return boolean
 */
function uc_extra_fields_pane_value_delete($p_iElement_id, $p_iElementType, $p_iField_id) {
  $sQuery = "DELETE FROM {uc_extra_fields_values}
  WHERE element_id=%d
  AND element_type=%d
  AND field_id=%d
  ";
  return db_query($sQuery, $p_iElement_id, $p_iElementType, $p_iField_id);
}

// -------------------------------------------------------------------
// FORM ALTERS
// -------------------------------------------------------------------

/**
 * Implementation of hook_form_alter().
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 * @return void
 */
function uc_extra_fields_pane_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    // Address fields configuration form
    case 'uc_store_address_fields_form':
      module_load_include('inc', 'uc_extra_fields_pane', 'includes/weights');
      module_load_include('inc', 'uc_extra_fields_pane', 'includes/addressfields');

      // Add extra address fields currently defined on /admin/store/settings/checkout/edit/extrafields
      _uc_extra_fields_pane_address_fields_uc_store_address_fields_alter($form, $form_state);

      // add the possibility to order the address fields.
      _uc_extra_fields_pane_weight_uc_store_address_fields_alter($form, $form_state);

      // Add our theme function to the form, so that function can add draggable rows functionality
      // and also the delete/edit-actions
      $form['#theme'][] = 'uc_extra_fields_pane_uc_store_address_fields';
      break;

    // The checkout form is altered by an implementation of hook_form_FORM_ID_alter().

    // Ubercart Addresses integration: add/edit address form
    case 'uc_addresses_get_address_form':
      if (module_exists('uc_addresses')) {
        module_load_include('inc', 'uc_extra_fields_pane', 'includes/weights');
        module_load_include('inc', 'uc_extra_fields_pane', 'includes/addressfields');

        // add extra address fields
        uc_extra_fields_pane_addressfields_uc_addresses_get_address_form_alter($form, $form_state);

        // add weight to the address fields
        _uc_extra_fields_pane_applyWeights($form['panes']['address']);
      }
      break;

    // Ubercart Addresses integration: address fields on user registration page
    case 'user_register':
      if (module_exists('uc_addresses') && variable_get('uc_addresses_require_address', TRUE)) {
        module_load_include('inc', 'uc_extra_fields_pane', 'includes/weights');
        module_load_include('inc', 'uc_extra_fields_pane', 'includes/addressfields');

        // add extra address fields
        uc_extra_fields_pane_addressfields_user_register_form_alter($form, $form_state);

        // add weight to the address fields
        _uc_extra_fields_pane_applyWeights($form[0]);
      }
      break;
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 * Applies ordering to address fields following the 'uc_address_fields_weight'-settings.
 * @param array $form
 * @param array $form_state
 * @access private
 */
function uc_extra_fields_pane_form_uc_cart_checkout_form_alter(&$form, $form_state) {
  // Alter 'address-select' field
  module_load_include('inc', 'uc_extra_fields_pane', 'includes/addressfields');
  uc_extra_fields_pane_address_fields_uc_cart_checkout_form_alter($form, $form_state);

  // Apply weights
  module_load_include('inc', 'uc_extra_fields_pane', 'includes/weights');
  uc_extra_fields_pane_weight_uc_cart_checkout_form_alter($form, $form_state);
}

// -------------------------------------------------------------------
// MULTILANGUAGE (i18n)
// -------------------------------------------------------------------

/**
 * Implementation of hook_locale().
 * @param string $op
 * @return array
 */
function uc_extra_fields_pane_locale($op = 'groups') {
  switch ($op) {
    // define text group
    case 'groups':
      return array('ucxf' => t('Ubercart Extra Fields'));
    case 'info': // i18n extension
      $info['ucxf']['refresh callback'] = 'uc_extra_fields_pane_locale_refresh';
      return $info;
  }
}

/**
 * Refresh all strings at once
 * Callback for i18n.
 * @return TRUE
 */
function uc_extra_fields_pane_locale_refresh() {
  $fields = db_query("SELECT * FROM {uc_extra_fields}");
  $updated = 0;
  while ($field_data = db_fetch_array($fields)) {
    $field = uc_extra_fields_pane_create_field($field_data);
    uc_extra_fields_pane_ucxf_field($field, 'locale_refresh');
    $updated++;
  }
  drupal_set_message(t('%num field strings updated', array('%num' => $updated)));
  return TRUE;
}

/**
 * Wrapper for i18nstrings() function
 * @return string
 */
function uc_extra_fields_pane_tt($name, $string, $langcode = NULL) {
  return function_exists('i18nstrings') ? i18nstrings('ucxf:' . $name, $string, $langcode) : $string;
}

/**
 * Implementation of hook_ucxf_field().
 * Update translation of field label and description
 * Update also translation of option labels of select fields
 * @param ucxf_field $field
 * @param string $op
 * @return void
 */
function uc_extra_fields_pane_ucxf_field($field, $op) {
  if (function_exists('i18nstrings_update')) {
    i18nstrings_update('ucxf:field:' . $field->db_name . ':label', $field->label);
    i18nstrings_update('ucxf:field:' . $field->db_name . ':description', $field->description);

    switch ($field->value_type) {
      // Make labels of options in select fields translatable
      case ucxf_field::UCXF_WIDGET_TYPE_SELECT:
      case ucxf_field::UCXF_WIDGET_TYPE_PHP_SELECT:
        // Generate the options, but do not translate these.
        $values = $field->generate_value(FALSE);
        foreach ($values as $key => $label) {
          i18nstrings_update('ucxf:field:' . $field->db_name . ':value:' . $key, $label);
        }
        break;
      // Make default values translatable
      case ucxf_field::UCXF_WIDGET_TYPE_TEXTFIELD:
      case ucxf_field::UCXF_WIDGET_TYPE_PHP:
      case ucxf_field::UCXF_WIDGET_TYPE_CONSTANT:
        // Generate the string, but do not translate it.
        $value = $field->generate_value(FALSE);
        if (!empty($value)) {
          i18nstrings_update('ucxf:field:' . $field->db_name . ':value', $value);
        }
        break;
    }
  }
}

// -------------------------------------------------------------------
// THEMING
// -------------------------------------------------------------------

/**
 * Implementation of hook_theme().
 * @return array
 */
function uc_extra_fields_pane_theme() {
  return array(
    'uc_extra_fields_pane_checkout_pane' => array(
      'arguments' => array('form' => NULL),
      'file' => 'includes/checkout_pane.inc',
    ),
    'uc_extra_fields_pane_order_pane' => array(
      'arguments' => array('form' => NULL),
      'file' => 'includes/order_pane.inc',
    ),
    'uc_extra_fields_pane_uc_store_address_fields' => array(
      'arguments' => array('form' => NULL),
      'file' => 'uc_extra_fields_pane.admin.inc',
    ),
    'uc_extra_fields_pane_customfields' => array(
      'arguments' => array('form' => NULL),
      'file' => 'uc_extra_fields_pane.admin.inc',
    ),
  );
}
